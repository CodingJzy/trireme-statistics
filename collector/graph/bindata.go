// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package graph

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x8f\xdb\x36\x13\xbe\xeb\x57\xcc\xcb\xbd\x48\x88\x44\xc9\x59\x78\xdf\x8d\xd6\x5e\xa0\x4d\x0b\xf4\x90\xa0\x05\x5a\xa0\x0d\x82\x1c\x18\x8a\x92\xb8\x2b\x91\x06\x49\x79\xed\x06\xf9\xef\x05\x49\x49\xa6\x2d\x2f\xd0\x4b\xe5\x8b\x34\x1f\xcf\xcc\x70\x9e\x19\x3a\x8a\x36\xff\xfb\xe9\xd7\xf7\x7f\x7c\xfa\xed\x67\x68\x4d\xdf\x3d\x46\x9b\x9e\x19\x02\xb4\x25\x4a\x33\xb3\x45\x83\xa9\xb3\x7b\xf4\x18\x6d\xb4\x39\x76\xec\x31\x8a\x70\xc7\xc5\x33\x7c\x8b\x00\xb4\x51\xf2\x99\x95\x70\x43\x29\x7d\x88\xbe\x47\xd1\x0d\xa1\x94\xed\x8c\x53\xd6\xbc\xeb\x4a\x68\x14\x63\xc2\xe9\x9c\x1b\x0e\x0c\x26\xef\x93\xc9\x8d\x62\x4f\x8c\x86\xee\x8a\x55\x81\x73\xa0\x9e\x9c\x27\x83\x1b\x21\x5f\x3c\x36\xab\x02\x7f\xa9\x88\x68\x58\x00\x11\x98\x85\x30\xa1\x9d\x90\x15\x03\xca\x15\xed\x58\x80\xe4\x6b\x0c\x6a\xae\xeb\xfa\xf4\x9d\xbd\xf0\xca\xb4\x25\xac\xf0\x7a\x77\x08\x60\x0c\x3b\xf8\x7c\x77\x92\x0b\xc3\x54\xc6\xf6\x4c\x18\x5d\x82\x90\x82\x59\xf7\x5a\x0a\x93\x69\xfe\x37\x2b\xa1\x84\x55\x61\x9d\x47\x61\x4d\x7a\xde\x1d\x4b\x40\x1f\x06\xca\x2b\x02\xef\xa5\xd0\xb2\x63\x28\x85\x8f\x52\x10\x2a\x53\xe8\xa5\x90\x7a\x47\xa8\x03\xb2\x91\x32\xdd\x92\x4a\xbe\x94\x50\xc0\x6a\x77\x80\xc2\x25\x99\x8e\xef\xd3\x57\x01\x59\xa8\xcc\x42\xad\xcb\x7c\x93\x8f\x9d\xde\x7c\x95\xd5\xd1\x36\x9e\x2a\xbe\x33\xa0\x15\xdd\xa2\x3c\xaf\x6e\x9f\x34\x96\xaa\xc9\xab\x5b\xbc\xbf\xc5\x3d\x17\xf8\x49\xa3\xc7\x4d\xee\xcd\x66\xfb\xc7\x28\xda\x13\x05\xee\x60\x60\x0b\xef\xee\x8a\x34\x02\x00\x68\x19\x6f\x5a\x03\x5b\x58\x17\x85\x37\xd1\xfb\x06\xb6\x50\xdd\x62\xcd\x3a\x46\x4d\x8c\x6c\x5c\x94\x60\xb2\xdb\x31\x51\xc5\x48\xef\x1b\x94\x38\x5f\x4c\x8c\x51\x31\x72\x98\x28\xf5\xd8\x67\x1a\x0f\x8e\xd2\x31\x4a\xf2\xe0\x23\xd4\x52\x51\xe6\x63\x74\xe4\x28\x07\x83\x9d\x24\x1e\x7d\x1b\x45\xf6\xdc\x1c\xe3\x02\x17\xeb\x51\x54\x71\x6d\x88\xa0\x2c\x5e\x15\xc5\x28\xb2\x13\xd1\xb0\x38\x3b\x49\x6c\xdf\xe2\xcf\x2e\x8b\x29\xe2\x17\x1b\xb2\xba\xc5\x4f\x5a\x8a\x18\xb5\xc6\xec\xca\x3c\x2f\xb0\xfb\x95\xf7\xc5\x7d\x91\x37\xcc\xe6\x57\x0f\x82\x1a\x2e\x45\xcc\x94\x92\x2a\x05\x6b\x9f\x38\xa6\xf0\x1a\xbc\x30\x01\xd3\x2a\xf9\x02\xee\xe3\x21\x72\xbc\x50\x94\xb9\xd0\x00\x8e\x5f\x3a\xb6\x7e\xfe\x35\x99\x14\x96\xe7\xa3\xc2\xbd\xce\x0a\x6d\x88\x32\xb1\x4d\xd0\xf2\x76\xdf\x84\x07\x5c\x56\xac\xd6\x28\x19\x5b\xf0\x43\xd7\xc5\xa8\x27\xea\x99\x29\x34\xbb\x57\xc4\x90\xf8\x33\xf2\xe3\x83\x52\xe4\xa7\x11\xa5\x28\x98\x29\xf4\x65\x3c\x1a\x66\xd9\x1e\x9f\xf5\xb0\xbc\x04\xf4\x2d\xe3\x15\x4a\xe1\x77\xa3\xb8\x68\x2e\x34\x7b\xce\x5e\x7e\x94\x07\x94\x02\x2a\x20\x5b\xc3\xaa\x80\x55\x71\xe9\xae\x58\xfd\x17\x4a\xa1\x58\x8a\x3f\x5d\x11\xfb\x14\xfe\x1c\xf9\x73\x77\x55\xfb\xcb\xc4\xa1\x4b\xb5\x54\x9c\x09\xab\x40\x64\x30\x72\xa6\x64\x50\xe1\x8e\x98\xf6\x32\x41\x5b\x1e\xfa\x58\xa4\xd9\xfa\xc3\xaa\x48\x8b\x0f\x45\xba\x46\x89\x6b\xa7\x65\xa6\xdb\xa5\x5b\xd7\x8d\xe0\xe8\x5d\xe3\x2e\x4e\xfe\xb2\xa1\x8b\x23\xde\xc9\xee\xd8\x71\xc1\x2e\x13\xa0\x1d\xd1\x3a\xa4\x5c\x95\xc0\x37\x50\xcc\x0c\x4a\x00\x72\x09\x20\x78\x03\x15\x26\x4e\xfd\x00\xdf\xaf\x1e\x4b\xd6\xbb\x4e\x5d\x47\x19\x54\x17\xdf\x84\x28\xf0\x06\x50\x82\x2c\xd6\x5c\xaa\x5b\x88\xcb\x52\xad\xf8\x5a\xa9\x01\xa9\x17\xa5\x36\xaf\xd5\x88\xce\xd1\xec\x0c\xf6\x72\xd0\x4c\xee\x99\x42\x76\x63\x8e\xef\x57\x2c\x06\x33\x1b\x0c\x66\xd6\x53\xd2\x75\xb1\x9b\x3b\x5c\x29\xd2\xf8\x6a\x6c\x90\x39\x17\x7f\x53\x2c\x68\x89\x52\x78\x97\xd8\xc5\x9c\xe7\xe7\xf6\xbc\x27\x8d\x37\xcf\xf3\xd0\xe3\x60\x3b\x51\xb6\x8a\xd5\xb6\x0e\xbb\x39\x74\x99\xe7\x0d\x37\xed\xf0\x15\x53\xd9\xe7\x35\xd9\x73\x2a\x05\xe6\x54\x5e\x73\x47\x29\x64\xf7\x4b\xf9\xf1\x15\xf9\xb4\x43\x57\x77\x4b\xdd\xbc\x45\x57\x77\x57\x0a\x36\xdc\x84\xf5\xda\x8b\x27\xbe\xca\x8a\x0a\xf3\x6a\x64\xc0\x02\x83\x1d\xcc\x62\x50\x6c\x09\xab\xb7\x97\x52\x5b\x00\xc2\xb7\x6b\xd6\xff\xbb\x98\x82\xf4\x6c\xa2\x9d\x7d\x7c\xf3\x6c\x9f\x0d\xa7\xcf\x21\x83\xfd\xbe\x1d\x1f\xff\xef\xc4\x85\x74\x77\xf5\x62\x62\x4e\xa6\x00\xa7\x68\x5a\x0e\x16\xfe\x60\xf9\x9e\xfa\x01\x18\x45\x47\x2b\xb2\x93\x75\xe6\x38\x3e\xf1\x99\x67\x85\x8d\xbd\x5a\x0c\x3e\x24\xf9\xdb\x19\x29\x3e\x83\x9a\x6d\x8e\xa3\xcd\x6b\xd0\x27\xb0\x20\xa7\xc9\xf7\xe1\x74\x32\xbe\x1f\xae\x60\xa3\x88\xd0\xb5\x54\xfd\xab\xf3\xed\x2c\x3a\x62\x58\xec\xf1\x42\xec\x63\x38\xeb\xe0\x03\x4c\x28\xa7\x89\x1b\x4f\xfb\x74\xcb\x9b\x96\xeb\x64\xbe\xf2\xa7\x29\xc2\x2e\x12\xf7\xfd\x99\x97\xc2\xa0\x88\x93\xfc\x7f\xbd\xd8\xf3\x13\x4b\xbf\x2f\x82\x0e\xe6\x3f\x8c\x79\xef\x42\xba\x5a\x4f\xff\x7c\xfe\x09\x00\x00\xff\xff\x9d\xa1\xff\x1b\x4c\x0b\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 2892, mode: os.FileMode(420), modTime: time.Unix(1507619606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

