// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package graph

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xcb\x6e\xe3\x36\x17\xde\xeb\x29\xce\xcf\x6c\x24\x8c\x6e\x1e\xc3\xf9\x33\x8a\x1d\xa0\x9d\x16\xe8\x22\x83\x16\x68\x81\x76\x30\x98\x05\x87\xa2\x24\x26\x12\x29\x90\x94\x63\x77\x90\x77\x2f\x48\x4a\x32\x6d\x39\x40\x37\xd5\x4a\x3a\x97\xef\xdc\xbe\x43\x2a\x08\xb6\xff\xfb\xe9\xd7\x8f\x7f\x7c\xfe\xed\x67\x68\x74\xd7\x3e\x04\xdb\x8e\x6a\x0c\xa4\xc1\x52\x51\xbd\x43\x83\xae\x92\x3b\xf4\x10\x6c\x95\x3e\xb6\xf4\x21\x08\xd2\x96\xf1\x67\xf8\x1e\x00\x28\x2d\xc5\x33\x2d\xe0\x86\x10\x72\x1f\xbc\x06\xc1\x0d\x26\x84\xf6\xda\x2a\x2b\xd6\xb6\x05\xd4\x92\x52\x6e\x75\xd6\x2d\xf5\x0c\x26\xef\x93\xc9\x8d\xa4\x4f\x94\xf8\xee\x92\x96\x9e\xb3\xa7\x9e\x9c\x27\x83\x1b\x2e\x5e\x1c\x36\x2d\x3d\x7f\x21\x31\xaf\xa9\x07\xe1\x99\xf9\x30\xbe\x1d\x17\x25\x05\xc2\x24\x69\xa9\x87\xe4\x6a\xf4\x6a\xae\xaa\xea\xf4\x9d\xbc\xb0\x52\x37\x05\xac\xd2\x4d\x7f\xf0\x60\x34\x3d\xb8\x7c\x7b\xc1\xb8\xa6\x32\xa1\x7b\xca\xb5\x2a\x80\x0b\x4e\x8d\x7b\x25\xb8\x4e\x14\xfb\x9b\x16\x50\xc0\x2a\x37\xce\xa3\xb0\xc2\x1d\x6b\x8f\x05\xa0\xc7\x81\xb0\x12\xc3\x47\xc1\x95\x68\x29\x8a\xe1\x93\xe0\x98\x88\x18\x3a\xc1\x85\xea\x31\xb1\x40\x26\x52\xa2\x1a\x5c\x8a\x97\x02\x72\x58\xf5\x07\xc8\x6d\x92\xf1\xf8\x3e\x7d\xe5\x90\xf8\xca\xc4\xd7\xda\xcc\xb7\xd9\x38\xe9\xed\x37\x51\x1e\xcd\xe0\x89\x64\xbd\x06\x25\xc9\x0e\x65\x59\xb9\x7e\x52\xa9\x90\x75\x56\xae\xd3\xfd\x3a\xed\x18\x4f\x9f\x14\x7a\xd8\x66\xce\x6c\xb6\x7f\x08\x82\x3d\x96\x60\x1b\x03\x3b\xf8\x70\x9b\xc7\x01\x00\x40\x43\x59\xdd\x68\xd8\xc1\x26\xcf\x9d\x89\xda\xd7\xb0\x83\x72\x9d\x2a\xda\x52\xa2\x43\x64\xe2\xa2\x28\xc5\x7d\x4f\x79\x19\x22\xb5\xaf\x51\x64\x7d\x53\xac\xb5\x0c\x91\xc5\x44\xb1\xc3\x3e\xd3\x38\x70\x14\x8f\x51\xa2\x7b\x17\xa1\x12\x92\x50\x17\xa3\xc5\x47\x31\xe8\xd4\x4a\xc2\xd1\xb7\x96\x78\xcf\xf4\x31\xcc\xd3\x7c\x33\x8a\x4a\xa6\x34\xe6\x84\x86\xab\x3c\x1f\x45\x66\x23\x6a\x1a\x26\x27\x89\x99\x5b\xf8\xc5\x66\x31\x45\xfc\x6a\x42\x96\xeb\xf4\x49\x09\x1e\xa2\xac\xa6\x26\x99\x6a\xe0\x44\x33\xc1\x43\x2a\xa5\x90\x31\x18\x65\x64\x69\xc1\x2a\x70\xc2\x08\x74\x23\xc5\x0b\xd8\x8f\xfb\xc0\x92\x40\x12\x6a\xe3\x00\x58\x32\xa9\xd0\xf8\xb9\xd7\x68\x52\x18\x52\x8f\x0a\xfb\x3a\x2b\x94\xc6\x52\x87\x26\x1b\x43\xd2\x7d\xed\x77\xb3\x28\x69\xa5\x50\x34\xf6\xfb\x87\xb6\x0d\x51\x87\xe5\x33\x95\x68\x76\x2f\xb1\xc6\xe1\x17\xe4\x76\x05\xc5\xc8\xad\x1e\x8a\x91\xb7\x40\xe8\xeb\xd8\x07\x6a\xa8\x1d\x9e\x0d\xac\xb8\x04\x74\xf3\x61\x25\x8a\xe1\x77\x2d\x19\xaf\x2f\x34\x7b\x46\x5f\x7e\x14\x07\x14\x03\xca\x21\xd9\xc0\x2a\x87\x55\x7e\xe9\x2e\x69\xf5\x17\x8a\x21\x5f\x8a\x3f\x5f\x11\xbb\x14\xfe\x1c\xc9\x72\x7b\x55\xfb\xcb\x44\x98\x4b\xb5\x90\x8c\x72\xa3\x40\x78\xd0\x62\xe6\x9f\x57\x61\x8f\x75\x73\x99\xa0\x29\x0f\x7d\xca\xe3\x64\xf3\xb8\xca\xe3\xfc\x31\x8f\x37\x28\xb2\xe3\x34\x34\xb4\x07\xe7\xce\x4e\xc3\x6b\xbd\x1d\xdc\x45\xe7\x2f\x07\xba\x68\x71\x2f\xda\x63\xcb\x38\xbd\x4c\x80\xb4\x58\x29\x9f\x72\x65\x04\xdf\x41\x52\x3d\x48\x0e\xc8\x26\x80\xe0\x1d\x94\x29\xb6\xea\x7b\x78\xbd\xda\x96\xa4\xb3\x93\xba\x8e\x32\xc8\x36\xbc\xf1\x51\xe0\x1d\xa0\x08\x19\xac\xb9\x54\x7b\xfa\x2d\x4b\x35\xe2\x6b\xa5\x7a\xa4\x5e\x94\x5a\xbf\x55\x23\x3a\x47\x33\x0b\xd7\x89\x41\x51\xb1\xa7\x12\x99\xe3\x71\x7c\xbf\x62\x31\xe8\xd9\x60\xd0\xb3\x9e\xe0\xb6\x0d\xed\xde\xa5\xa5\xc4\xb5\xab\xc6\x04\x99\x73\x71\xd7\xc2\x82\x96\x28\x86\x0f\x91\x39\x85\xb3\xec\xdc\x9e\x75\xb8\x76\xe6\x59\xe6\x7b\x1c\xcc\x24\x8a\x46\xd2\xca\xd4\xd1\x68\xdd\xab\x22\xcb\x6a\xa6\x9b\xe1\x5b\x4a\x44\x97\x55\x78\xcf\x88\xe0\x29\x23\xe2\x9a\x3b\x8a\x21\xb9\x5b\xca\x8f\x6f\xc8\xa7\x03\x73\x75\xbb\xd4\xcd\x47\xe6\xea\xf6\x4a\xc1\x9a\x69\xbf\x5e\x73\xcb\x84\x57\x59\x51\xa6\xac\x1c\x19\xb0\xc0\xa0\x07\xbd\x58\x14\x53\xc2\xea\xfd\xa5\xd4\x14\x80\xd2\xf5\x86\x76\xff\x2e\x26\xc7\x1d\x9d\x68\x67\x1e\x37\x3c\x33\x67\xcd\xc8\xb3\xcf\x60\x77\xde\x8e\x8f\xfb\x15\xb1\x21\xed\xc5\xbc\xd8\x98\x93\x29\xc0\x29\x9a\x12\x83\x81\x3f\x18\xbe\xc7\x6e\x01\x46\xd1\xd1\x88\xcc\x66\x9d\x39\x8e\x4f\x78\xe6\x59\xa6\xda\xdc\x23\x3a\x3d\x44\xd9\xfb\x19\x29\x3c\x83\x9a\x6d\x8e\xa3\xcd\x5b\xd0\x27\x30\x2f\xa7\xc9\xf7\xfe\xd4\x19\x37\x0f\x5b\xb0\x96\x98\xab\x4a\xc8\xee\xcd\xfd\xb6\x16\x2d\xd6\x34\x74\x78\x3e\xf6\xd1\xdf\x75\x70\x01\x26\x94\xd3\xc6\x8d\xdd\x3e\x5d\xe9\xba\x61\x2a\x9a\xef\xf7\x69\x8b\x52\x1b\x89\xb9\xf9\xcc\x87\xc2\x20\xb1\x95\xfc\x7f\xb3\x38\xe7\x27\x96\xbe\x2e\x82\x0e\xfa\x3f\x8c\x79\x67\x43\xda\x5a\x4f\xbf\x39\xff\x04\x00\x00\xff\xff\xc9\x9b\x0a\x1b\x39\x0b\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 2873, mode: os.FileMode(420), modTime: time.Unix(1507674438, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

