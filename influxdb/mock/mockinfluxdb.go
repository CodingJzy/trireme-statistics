// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aporeto-inc/trireme-statistics/influxdb (interfaces: DataAdder)

package mockinfluxdb

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "github.com/influxdata/influxdb/client/v2"
)

// MockDataAdder is a mock of DataAdder interface
type MockDataAdder struct {
	ctrl     *gomock.Controller
	recorder *MockDataAdderMockRecorder
}

// MockDataAdderMockRecorder is the mock recorder for MockDataAdder
type MockDataAdderMockRecorder struct {
	mock *MockDataAdder
}

// NewMockDataAdder creates a new mock instance
func NewMockDataAdder(ctrl *gomock.Controller) *MockDataAdder {
	mock := &MockDataAdder{ctrl: ctrl}
	mock.recorder = &MockDataAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDataAdder) EXPECT() *MockDataAdderMockRecorder {
	return _m.recorder
}

// AddData mocks base method
func (_m *MockDataAdder) AddData(_param0 map[string]string, _param1 map[string]interface{}) error {
	ret := _m.ctrl.Call(_m, "AddData", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddData indicates an expected call of AddData
func (_mr *MockDataAdderMockRecorder) AddData(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddData", reflect.TypeOf((*MockDataAdder)(nil).AddData), arg0, arg1)
}

// CreateDB mocks base method
func (_m *MockDataAdder) CreateDB(_param0 string) error {
	ret := _m.ctrl.Call(_m, "CreateDB", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDB indicates an expected call of CreateDB
func (_mr *MockDataAdderMockRecorder) CreateDB(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateDB", reflect.TypeOf((*MockDataAdder)(nil).CreateDB), arg0)
}

// ExecuteQuery mocks base method
func (_m *MockDataAdder) ExecuteQuery(_param0 string, _param1 string) (*v2.Response, error) {
	ret := _m.ctrl.Call(_m, "ExecuteQuery", _param0, _param1)
	ret0, _ := ret[0].(*v2.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteQuery indicates an expected call of ExecuteQuery
func (_mr *MockDataAdderMockRecorder) ExecuteQuery(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ExecuteQuery", reflect.TypeOf((*MockDataAdder)(nil).ExecuteQuery), arg0, arg1)
}
